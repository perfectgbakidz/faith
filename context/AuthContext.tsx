import React, { createContext, useState, useContext, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { User, Role } from '../types';
import { apiLogin, apiRegister, LoginCredentials } from '../services/mockApi';

interface AuthContextType {
  user: User | null;
  isAuthenticated: boolean;
  login: (credentials: LoginCredentials) => Promise<void>;
  logout: () => void;
  // FIX: Corrected type for register function's userData parameter to also exclude `createdAt`, which is generated by the API.
  register: (userData: Omit<User, 'id' | 'role' | 'userIdNumber' | 'pictureIdUrl' | 'createdAt'>) => Promise<void>;
}

const AuthContext = createContext<AuthContextType | null>(null);

export const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const navigate = useNavigate();

  useEffect(() => {
    const storedUser = localStorage.getItem('user');
    if (storedUser) {
      setUser(JSON.parse(storedUser));
    }
  }, []);

  const login = async (credentials: LoginCredentials) => {
    try {
      const loggedInUser = await apiLogin(credentials);
      setUser(loggedInUser);
      localStorage.setItem('user', JSON.stringify(loggedInUser));
      const rolePath = loggedInUser.role === Role.LOAN_OFFICER ? 'officer' : loggedInUser.role.toLowerCase();
      navigate(`/app/${rolePath}/dashboard`);
    } catch (error) {
      console.error(error);
      throw error;
    }
  };

  // FIX: Corrected type for register function's userData parameter to also exclude `createdAt` to match what apiRegister expects.
  const register = async (userData: Omit<User, 'id' | 'role' | 'userIdNumber' | 'pictureIdUrl' | 'createdAt'>) => {
    try {
      // FIX: The `apiRegister` function assigns the role internally, so passing it here was causing a type mismatch.
      const newUser = await apiRegister(userData);
      setUser(newUser);
      localStorage.setItem('user', JSON.stringify(newUser));
      navigate('/app/borrower/dashboard');
    } catch (error) {
      console.error(error);
      throw error;
    }
  };

  const logout = () => {
    setUser(null);
    localStorage.removeItem('user');
    navigate('/login');
  };

  const isAuthenticated = !!user;

  return (
    <AuthContext.Provider value={{ user, isAuthenticated, login, logout, register }}>
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};
